* auctex
#+BEGIN_SRC emacs-lisp
(use-package auctex
:defer t
:ensure t
:config
(setq Tex-auto-save t))
#+END_SRC

* ggtags
#+BEGIN_SRC emacs-lisp
(use-package ggtags
  :ensure t)
;; get rid of M-ss keymap for ggtags-navigation-isearch-forward,
;; because it is conflict with M-s for avy-find-char

;; (define-key ggtags-navigation-map (kbd "\M-ss") nil)

;; remove the key to ggtags-navigation-last-error, because it conflicts with goto the beginning of the page
;; (define-key ggtags-navigation-map (kbd "\M->") nil)

;; remove the key to firt-error, because it conflicts with goto the end of the page
;; (define-key ggtags-navigation-map (kbd "\M-<") nil)
(define-key ggtags-mode-prefix-map "\M-g" nil) ;remove ggtags-grep default binding, for conflicts with magit
(define-key ggtags-mode-prefix-map "\M-r" 'ggtags-grep)
#+END_SRC

** loading ggtags if it is in c++ mode or c mode
#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'ggtags
  (add-hook 'c++-mode-hook 'ggtags-mode)
  (add-hook 'c-mode-hook 'ggtags-mode))
#+END_SRC

* visiting config, reload config, visit the init.el
** Visiting the config.org
#+BEGIN_SRC emacs-lisp
(defun config-visit ()
  "Visitthe config.org file"
  (interactive)
  (find-file "~/.emacs.d/config.org"))
(global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC


** Visiting the init.el
#+BEGIN_SRC emacs-lisp
(defun config-init ()
  "Visitthe init.el file"
  (interactive)
  (find-file "~/.emacs.d/init.el"))
(global-set-key (kbd "C-c i") 'config-init)
#+END_SRC

** Reloading the config.org
#+BEGIN_SRC emacs-lisp
(defun config-reload ()
    "Reload ~/.emacs.d/config.org at runtime"
  (interactive)
  (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
(global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC

* Electric pair
#+BEGIN_SRC emacs-lisp
(setq electric-pair-pairs '(
			     (?\{ . ?\})
			     (?\( . ?\))
			     (?\[ . ?\])
			     (?\" . ?\")
			     ))
#+END_SRC

and now to enable it
#+BEGIN_SRC emacs-lisp
(electric-pair-mode t)
#+END_SRC

* sudo edit 
#+BEGIN_SRC emacs-lisp
(use-package sudo-edit
  :ensure t
  :bind
  ("s-e" . sudo-edit))
#+END_SRC

* shwo parenthesis mode 
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
#+END_SRC

* Moving around Emacs 
** enable ido mode
#+BEGIN_SRC emacs-lisp
(setq ido-enable-flex-matching nil)
(setq ido-create-new-buffer 'always)
(setq ido-everywhere 1)
(ido-mode 1)
#+END_SRC

** ido-vertical-mode
#+BEGIN_SRC emacs-lisp
(use-package ido-vertical-mode
  :ensure t
  :init
  (ido-vertical-mode 1))
(setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC

** Smex 
#+BEGIN_SRC emacs-lisp
(use-package smex
  :ensure t
  :init
  (smex-initialize)
  :bind
  ("M-x" . smex))
#+END_SRC

** Buffers
*** enable ibuffer
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC

*** expert 
deleting buffers from ibuffer will not ask to confirm
#+BEGIN_SRC emacs-lisp
(setq ibuffer-expert t)
#+END_SRC

*** switch buffer
#+BEGIN_SRC emacs-lisp
(setq ibuffer-expert t)
#+END_SRC


*** switch bufffer
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x b") 'ido-switch-buffer)
#+END_SRC


*** avy 
#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :bind
  ("M-s" . avy-goto-char)
  ("\C-c a" . avy-goto-char))
#+END_SRC

*** ace-window 
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :config
  ;; aw-keys - the initial characters used in window labels, default is 1-9
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
  ;; if you want these keys to work with fewer than three windows, you need to have aw-dispatch-always to t
  (setq aw-dispatch-always t)
  :bind
  ([remap other-window] . ace-window))
#+END_SRC


*** following window splits 
#+BEGIN_SRC emacs-lisp
(defun split-and-follow-horizontally ()
  (interactive)
  (split-window-below)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 2") 'split-and-follow-hoizontally)


(defun split-and-follow-vertically ()
  (interactive)
  (split-window-right)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC


*** which-key 
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config
  (which-key-mode))
#+END_SRC
* My Own Setting Section
** Align Regular Expression Setting
When align-regexp, using spaces instead of tabs.
#+BEGIN_SRC emacs-lisp
(defadvice align-regexp (around align-regexp-with-spaces activate)
  (let ((indent-tabs-mode nil))
    ad-do-it))
#+END_SRC

** Disable Auto Save, Auto Backup and Create Lockfile 
#+BEGIN_SRC emacs-lisp
;; disable auto-save and auto-backup
(setq auto-save-default nil)
(setq make-backup-files nil)
;; don't use lockfiles to avoid editng collisions
(setq create-lockfiles nil)

;; store all backup and autosave files in the tmp dir
;; (setq backup-directory-alist
;;       `((".*" . ,temporary-file-directory)))
;; (setq auto-save-file-name-transforms
;;       `((".*" ,temporary-file-directory t)))
#+END_SRC

** High Light Symbol Key Binding 
#+BEGIN_SRC emacs-lisp
;; highlight-symbol key binding
(use-package highlight-symbol
  :ensure t
  :config
  (global-set-key [(shift f8)] 'highlight-symbol)
  (global-set-key [f8] 'highlight-symbol-next)

  (global-set-key [(control f8)] 'highlight-symbol-prev)
  (global-set-key [(meta f8)] 'highlight-symbol-query-replace))
#+END_SRC

** Google Translate Direction
(use-package google-translate
  :ensure t
  :config
  (setq google-translate-translation-directions-alist
        '(("ja" . "en") ("en" . "de") ("de" . "fr") ("fr" . "de"))))

** turn off emacs auto line wrapping
#+BEGIN_SRC emacs-lisp
(setq-default truncate-lines t)
#+END_SRC
** Auto Complete
#+BEGIN_SRC emacs-lisp
;; (use-package auto-complete
;;   :ensure t
;;   :config
;;   ;; start auto complete with emacs
;;   (require 'auto-complete)
;;   ;; do default config for auto-complete
;;   (require 'auto-complete-config)
;;   (ac-config-default))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; (add-to-list 'ac-modes 'latex-mode)	;Make auto-complete aware of `latex-mode`
#+END_SRC


** Org Mode Setting
#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'org
  (org-babel-do-load-languages 'org-babel-load-languages '((ruby . t)
                                                           (plantuml . t)
                                                           (C . t)
                                                           (gnuplot . t)
                                                           (R . t)
                                                           (sh . t)
                                                           (ditaa . t)
                                                           (calc . t)
                                                           (latex . t)
                                                           )))
(setq org-plantuml-jar-path
      (expand-file-name "~/plantuml.jar"))
#+END_SRC

*** plantuml-mode
install plantuml-mode

#+BEGIN_SRC emacs-lisp
(use-package plantuml-mode
  :ensure t)
#+END_SRC

** common setting
#+BEGIN_SRC emacs-lisp
(setq org-src-window-setup 'current-window)
#+END_SRC

*** htmlize
Systax highlighting for documents exported to HTML
#+BEGIN_SRC emacs-lisp
(use-package htmlize
  :ensure t)
#+END_SRC

** replace “” to <>
For example to replace user c header to system c header include, #include "header"= to =#include <header>
#+BEGIN_SRC emacs-lisp
  (defun guo/replace-double-quotes-with-angle-brackets ()
    (interactive)
    (move-beginning-of-line 1)
    (set-mark-command nil)
    (move-end-of-line 1)
    (replace-regexp "\"\\(.+\\)\"" "<\\1>" nil
                    (if
                        (use-region-p)
                        (region-beginning))
                    (if
                        (use-region-p)
                        (region-end))
                    nil))
(global-set-key (kbd "\C-x\C-kA") 'guo/replace-double-quotes-with-angle-brackets)
#+END_SRC

* Add Emacs-lisp template in org mode
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
             '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC

* Project find file
#+BEGIN_SRC emacs-lisp
;; Find file in project
(global-set-key (kbd "C-x M-f") 'project-find-file)
#+END_SRC

* showing line number
#+BEGIN_SRC emacs-lisp
;; show the line number on the left
(global-linum-mode 1)
;; show thecurrent line and column for your cursor
(setq line-number-mode t)
(setq column-number-mode t)
#+END_SRC

* Change yes-or-no-p into y-or-n questions 
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
* Open the folder containing the current file by the default explorer of the OS 
#+BEGIN_SRC emacs-lisp
 (defun guo/browse-file-directory ()
   "Open the crrent file's directory however the OS would"
   (interactive)
   (if default-directory
	(browse-url-of-file (expand-file-name default-directory))
     (error "No `default-directory` to open")))
#+END_SRC


* ==========Below setting may not be useful===============
* company mode
** company mode package
company mode normal install and setting
I setthe delay for company modeto kick in to half a second, I also make sure that it starts doing its magic after typing in only 2 characters

I prefer C-n and C-p to move around the items, so I remap those accordingly.
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :config
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 3))

(with-eval-after-load 'company
                        (define-key company-active-map (kbd "M-n") nil)
                        (define-key company-active-map (kbd "M-p") nil)
                        (define-key company-active-map (kbd "C-n") #'company-select-next)
                        (define-key company-active-map (kbd "C-p") #'company-select-previous)
                        (define-key company-active-map (kbd "SPC") #'company-abort))
#+END_SRC


** company setup
Require clang and libclang-dev to be installed,

sudo apt-get install clang
sudo apt-get install libclang-dev
mkdir build in ~/.emacs.d/elpa/irony/server
cd build
cmake -DLIBCLANG_LIBRARY=/usr/lib/llvm-3.8/lib/libclang.so.1
-DLIBCLANG_INCLUDE_DIR=/usr/lib/llvm-3.8/include 
~/.emacs.d/ 
/home/guo/.emacs.d/elpa/irony/server
for building irony server in the shell terminal, and then M-x irony-install-server in emacs


#+BEGIN_SRC emacs-lisp
;; 1. install irony, irony-eldoc, flycheck-irony, company-irony
(use-package company-c-headers
  :ensure t)

;;   (defun c-mode-company-init ()
;;     (setq company-backends '((company-c-headers
;;                               company-dabbrev-code
;;                               company-gtags
;;                               company-irony
;;                               ))))

(use-package company-irony
  :ensure t)

;; (with-eval-after-load 'company
;;   (add-hook 'c++-mode-hook 'c-mode-company-init)
;;   (add-hook 'c-mode-hook 'c-mode-company-init))
;; ;; only install irony if it is linux system
;; ;; for windows 'windows-nt' for Mac OS 'darwin'

;; (if (eq system-type 'gnu/linux)
    (use-package irony
      :ensure t
      :config
      (if (eq system-type 'windows-nt)
          (setq w32-pipe-read-delay 0)))
;; )

;;       :config
;;       (add-hook 'c++-mode-hook 'irony-mode)
;;       (add-hook 'c-mode-hook 'irony-mode)
;;       (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)))

(use-package irony-eldoc
  :ensure t)

(use-package flycheck-irony
  :ensure t)



;; 2. install irony-server

;; Open any .cpp file and make sure that irony-mode is on
;; M-x irony-install-server
;; Important: to force irony-server to use llvm-3.4, you need to add cmake options
;; -DLIBCLANG_INCLUDE_DIR=/usr/lib/llvm-3.4/include and
;; -DLIBCLANG_LIBRARIES=/usr/lib/llvm-3.4/lib/libclang-3.4.so



;; 3. Setup irony-mode

;; =============
;; irony-mode
;; =============
(add-hook 'c++-mode-hook 'irony-mode)
(add-hook 'c-mode-hook 'irony-mode)
;; ============= ;; company mode ;; =============
(add-hook 'c++-mode-hook 'company-mode)
(add-hook 'c-mode-hook 'company-mode)
;; replace the `completion-at-point' and `complete-symbol' bindings in
;; irony-mode's buffers by irony-mode's function
(defun my-irony-mode-hook ()
  (define-key irony-mode-map [remap completion-at-point] 'irony-completion-at-point-async)
  (define-key irony-mode-map [remap complete-symbol] 'irony-completion-at-point-async))
(add-hook 'irony-mode-hook 'my-irony-mode-hook)
(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
(eval-after-load 'company '(add-to-list 'company-backends '(company-irony company-c-headers)))
;; (optional) adds CC special commands to `company-begin-commands' in order to
;; trigger completion at interesting places, such as after scope operator
;; std::|
(add-hook 'irony-mode-hook 'company-irony-setup-begin-commands)
;; =============
;; flycheck-mode
;; =============
(add-hook 'c++-mode-hook 'flycheck-mode)
(add-hook 'c-mode-hook 'flycheck-mode)
(eval-after-load 'flycheck '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup))
;; =============
;; eldoc-mode
;; =============
(add-hook 'irony-mode-hook 'irony-eldoc)
;; ==========================================
;; (optional) bind TAB for indent-or-complete
;; ==========================================
(defun irony--check-expansion ()
  (save-excursion
    (if (looking-at "\\_>") t (backward-char 1)
        (if (looking-at "\\.") t (backward-char 1)
            (if (looking-at "->") t nil)))))

(defun irony--indent-or-complete ()
  "Indent or Complete"
  (interactive)
  (cond ((and (not (use-region-p))
              (irony--check-expansion))
         (message "complete")
         (company-complete-common))
        (t (message "indent")
           (call-interactively 'c-indent-line-or-region))))

(defun irony-mode-keys ()
  "Modify keymaps used by `irony-mode'."
  (local-set-key (kbd "TAB")
                 'irony--indent-or-complete)
  (local-set-key [tab] 'irony--indent-or-complete))

(add-hook 'c-mode-common-hook 'irony-mode-keys)
(with-eval-after-load 'company
  (add-hook 'c++-mode-hook 'company-mode)
  (add-hook 'c-mode-hook 'company-mode))
#+END_SRC

company-c-headers provides auto-completion for c/c++ headers using company, If you want to complete C++ header files, you have to add its paths, since by default company-c-headers only includes these two system include paths: /usr/include/ and /usr/local/include/.

To enable C++ header completion for standard libraries, you have to add its path, for example, like this: (add-to-list 'company-c-headers-path-system "/usr/include/c++/4.8/") After that, you can complete C++ header files.

To complete project local, use company-c-headers-path-user and put it in .dir-locals.el

(add-to-list 'company-c-headers-path-system "C:/Qt/Qt5.8.0\\5.8\\Src/qtsensors/include/QtSensors")
;; add the below to .dir-locals.el file
;; ((nil . ((company-c-headers-path-user . ("D:/Work/Learning/Emacs/my_program/my_inc/")))))

* flycheck
** flycheck package
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t)
#+END_SRC

** flycheck clang analyzer package
#+BEGIN_SRC emacs-lisp
(use-package flycheck-clang-analyzer
  :ensure t
  :config
  (with-eval-after-load 'flycheck
    (require 'flycheck-clang-analyzer)
    (flycheck-clang-analyzer-setup)))
#+END_SRC
* ========================================================

* magit

magit-file-mode-map define some short-cut key for magit as follows:

| Short-Cut key | magit command        |
|---------------+----------------------|
| C-xg          | magit-status         |
|---------------+----------------------|
| C-x\M-g       | magit-dispatch-popup |
|---------------+----------------------|
| C-c\M-g       | magit-file-popup     |

#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :config
  (setq magit-push-always-verify nil)
  (setq magit-commit-summary-max-length 50))

;; (define-key magit-file-mode-map (kbd "\C-x\C-g") 'magit-file-popup)
#+END_SRC
